{"ast":null,"code":"import * as yup from \"yup\";\nconst nroDocTxt = \"El numero de documento \";\nconst currentDate = new Date();\nconst validationSchema = yup.object({\n  nombre: yup.string().required(\"El nombre es obligatorio\").max(50, \"El nombre tiene como maximo 50 caracteres\").matches(/^[^0-9]+$/, \"El nombre no puede tener numeros\"),\n  apellido: yup.string().required(\"El apellido es obligatorio\").max(50, \"El apellido tiene como maximo 50 caracteres\").matches(/^[^0-9]+$/, \"El nombre no puede tener numeros\"),\n  numeroDocumento: yup.string().matches(/^\\d*$/, nroDocTxt + \"debe ser solo caracteres numericos\").min(7, nroDocTxt + \"debe ser tener como minimo 7 caracteres\").max(15, nroDocTxt + \"debe ser tener como maximo 15 caracteres\").required(nroDocTxt + \"es obligatorio\").trim(),\n  tipoDocumento: yup.string().typeError(\"El tipo de documento debe ser un una cadena de texto\").required(\"El tipo de documento es obligatorio\"),\n  fechaNacimiento: yup.date().typeError(\"Seleccione una fecha valida\").required(\"La fecha de nacimiento es obligatoria\").max(currentDate, \"La fecha no puede ser posterior a la fecha actual\")\n});\nconst personaSchema = {\n  validationSchema\n};\nexport default personaSchema;","map":{"version":3,"names":["yup","nroDocTxt","currentDate","Date","validationSchema","object","nombre","string","required","max","matches","apellido","numeroDocumento","min","trim","tipoDocumento","typeError","fechaNacimiento","date","personaSchema"],"sources":["C:/Users/fede_/0Repositorios/Trimix-Test/frontend/src/components/PersonaAE/personaSchema.js"],"sourcesContent":["import * as yup from \"yup\";\r\nconst nroDocTxt = \"El numero de documento \";\r\nconst currentDate = new Date();\r\n\r\nconst validationSchema = yup.object({\r\n    nombre: yup\r\n        .string()\r\n        .required(\"El nombre es obligatorio\")\r\n        .max(50, \"El nombre tiene como maximo 50 caracteres\")\r\n        .matches(/^[^0-9]+$/, \"El nombre no puede tener numeros\"),\r\n    apellido: yup\r\n        .string()\r\n        .required(\"El apellido es obligatorio\")\r\n        .max(50, \"El apellido tiene como maximo 50 caracteres\")\r\n        .matches(/^[^0-9]+$/, \"El nombre no puede tener numeros\"),\r\n    numeroDocumento: yup\r\n        .string()\r\n        .matches(/^\\d*$/, nroDocTxt + \"debe ser solo caracteres numericos\")\r\n        .min(7, nroDocTxt + \"debe ser tener como minimo 7 caracteres\")\r\n        .max(15, nroDocTxt + \"debe ser tener como maximo 15 caracteres\")\r\n        .required(nroDocTxt + \"es obligatorio\")\r\n        .trim(),\r\n    tipoDocumento: yup\r\n        .string()\r\n        .typeError(\"El tipo de documento debe ser un una cadena de texto\")\r\n        .required(\"El tipo de documento es obligatorio\"),\r\n    fechaNacimiento: yup\r\n        .date()\r\n        .typeError(\"Seleccione una fecha valida\")\r\n        .required(\"La fecha de nacimiento es obligatoria\")\r\n        .max(currentDate, \"La fecha no puede ser posterior a la fecha actual\")\r\n});\r\n\r\nconst personaSchema = {\r\n    validationSchema,\r\n};\r\n\r\nexport default personaSchema;\r\n"],"mappings":"AAAA,OAAO,KAAKA,GAAG,MAAM,KAAK;AAC1B,MAAMC,SAAS,GAAG,yBAAyB;AAC3C,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;AAE9B,MAAMC,gBAAgB,GAAGJ,GAAG,CAACK,MAAM,CAAC;EAChCC,MAAM,EAAEN,GAAG,CACNO,MAAM,EAAE,CACRC,QAAQ,CAAC,0BAA0B,CAAC,CACpCC,GAAG,CAAC,EAAE,EAAE,2CAA2C,CAAC,CACpDC,OAAO,CAAC,WAAW,EAAE,kCAAkC,CAAC;EAC7DC,QAAQ,EAAEX,GAAG,CACRO,MAAM,EAAE,CACRC,QAAQ,CAAC,4BAA4B,CAAC,CACtCC,GAAG,CAAC,EAAE,EAAE,6CAA6C,CAAC,CACtDC,OAAO,CAAC,WAAW,EAAE,kCAAkC,CAAC;EAC7DE,eAAe,EAAEZ,GAAG,CACfO,MAAM,EAAE,CACRG,OAAO,CAAC,OAAO,EAAET,SAAS,GAAG,oCAAoC,CAAC,CAClEY,GAAG,CAAC,CAAC,EAAEZ,SAAS,GAAG,yCAAyC,CAAC,CAC7DQ,GAAG,CAAC,EAAE,EAAER,SAAS,GAAG,0CAA0C,CAAC,CAC/DO,QAAQ,CAACP,SAAS,GAAG,gBAAgB,CAAC,CACtCa,IAAI,EAAE;EACXC,aAAa,EAAEf,GAAG,CACbO,MAAM,EAAE,CACRS,SAAS,CAAC,sDAAsD,CAAC,CACjER,QAAQ,CAAC,qCAAqC,CAAC;EACpDS,eAAe,EAAEjB,GAAG,CACfkB,IAAI,EAAE,CACNF,SAAS,CAAC,6BAA6B,CAAC,CACxCR,QAAQ,CAAC,uCAAuC,CAAC,CACjDC,GAAG,CAACP,WAAW,EAAE,mDAAmD;AAC7E,CAAC,CAAC;AAEF,MAAMiB,aAAa,GAAG;EAClBf;AACJ,CAAC;AAED,eAAee,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}